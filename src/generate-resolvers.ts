import ts, { factory } from 'typescript';

import print from './print';

function makeResolvers() {
  const ret = factory.createVariableDeclarationList(
    [factory.createVariableDeclaration(
      factory.createIdentifier('resolvers'),
      undefined,
      factory.createTypeReferenceNode(
        factory.createIdentifier('Resolvers'),
        undefined,
      ),
      factory.createObjectLiteralExpression(
        [factory.createPropertyAssignment(
          factory.createIdentifier('Query'),
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('artists'),
                factory.createArrowFunction(
                  [factory.createModifier(ts.SyntaxKind.AsyncKeyword)],
                  undefined,
                  [
                    factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      undefined,
                      factory.createIdentifier('_'),
                      undefined,
                      undefined,
                      undefined,
                    ),
                    factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      undefined,
                      factory.createIdentifier('args'),
                      undefined,
                      undefined,
                      undefined,
                    ),
                    factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      undefined,
                      factory.createObjectBindingPattern([
                        factory.createBindingElement(
                          undefined,
                          undefined,
                          factory.createIdentifier('prisma'),
                          undefined,
                        ),
                        factory.createBindingElement(
                          undefined,
                          undefined,
                          factory.createIdentifier('adminId'),
                          undefined,
                        ),
                      ]),
                      undefined,
                      undefined,
                      undefined,
                    ),
                  ],
                  undefined,
                  factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  factory.createBlock(
                    [
                      factory.createExpressionStatement(factory.createCallExpression(
                        factory.createIdentifier('assert'),
                        undefined,
                        [
                          factory.createIdentifier('addminId'),
                          factory.createStringLiteral('Not authorized'),
                        ],
                      )),
                      factory.createExpressionStatement(factory.createCallExpression(
                        factory.createIdentifier('assert'),
                        undefined,
                        [
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('args'),
                            factory.createIdentifier('firstm'),
                          ),
                          factory.createStringLiteral('first args is missing'),
                        ],
                      )),
                      factory.createVariableStatement(
                        undefined,
                        factory.createVariableDeclarationList(
                          [factory.createVariableDeclaration(
                            factory.createIdentifier('searchText'),
                            undefined,
                            undefined,
                            factory.createCallChain(
                              factory.createPropertyAccessChain(
                                factory.createPropertyAccessExpression(
                                  factory.createIdentifier('args'),
                                  factory.createIdentifier('searchText'),
                                ),
                                factory.createToken(ts.SyntaxKind.QuestionDotToken),
                                factory.createIdentifier('toLowerCase'),
                              ),
                              undefined,
                              undefined,
                              [],
                            ),
                          )],
                          ts.NodeFlags.Const | ts.NodeFlags.AwaitContext | ts.NodeFlags.ContextFlags | ts.NodeFlags.TypeExcludesFlags,
                        ),
                      ),
                      factory.createVariableStatement(
                        undefined,
                        factory.createVariableDeclarationList(
                          [factory.createVariableDeclaration(
                            factory.createIdentifier('searches'),
                            undefined,
                            factory.createUnionTypeNode([
                              factory.createTypeReferenceNode(
                                factory.createQualifiedName(
                                  factory.createIdentifier('Prisma'),
                                  factory.createIdentifier('ArtistWhereInput'),
                                ),
                                undefined,
                              ),
                              factory.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword),
                            ]),
                            factory.createConditionalExpression(
                              factory.createIdentifier('searchText'),
                              factory.createToken(ts.SyntaxKind.QuestionToken),
                              factory.createObjectLiteralExpression(
                                [factory.createPropertyAssignment(
                                  factory.createIdentifier('OR'),
                                  factory.createArrayLiteralExpression(
                                    [
                                      factory.createObjectLiteralExpression(
                                        [factory.createPropertyAssignment(
                                          factory.createIdentifier('accountNum'),
                                          factory.createObjectLiteralExpression(
                                            [
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('contains'),
                                                factory.createIdentifier('searchText'),
                                              ),
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('mode'),
                                                factory.createStringLiteral('insensitive'),
                                              ),
                                            ],
                                            false,
                                          ),
                                        )],
                                        false,
                                      ),
                                      factory.createObjectLiteralExpression(
                                        [factory.createPropertyAssignment(
                                          factory.createIdentifier('engFirstName'),
                                          factory.createObjectLiteralExpression(
                                            [
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('contains'),
                                                factory.createIdentifier('searchText'),
                                              ),
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('mode'),
                                                factory.createStringLiteral('insensitive'),
                                              ),
                                            ],
                                            false,
                                          ),
                                        )],
                                        false,
                                      ),
                                      factory.createObjectLiteralExpression(
                                        [factory.createPropertyAssignment(
                                          factory.createIdentifier('engMiddleName'),
                                          factory.createObjectLiteralExpression(
                                            [
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('contains'),
                                                factory.createIdentifier('searchText'),
                                              ),
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('mode'),
                                                factory.createStringLiteral('insensitive'),
                                              ),
                                            ],
                                            false,
                                          ),
                                        )],
                                        false,
                                      ),
                                      factory.createObjectLiteralExpression(
                                        [factory.createPropertyAssignment(
                                          factory.createIdentifier('engLastName'),
                                          factory.createObjectLiteralExpression(
                                            [
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('contains'),
                                                factory.createIdentifier('searchText'),
                                              ),
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('mode'),
                                                factory.createStringLiteral('insensitive'),
                                              ),
                                            ],
                                            false,
                                          ),
                                        )],
                                        false,
                                      ),
                                      factory.createObjectLiteralExpression(
                                        [factory.createPropertyAssignment(
                                          factory.createIdentifier('korName'),
                                          factory.createObjectLiteralExpression(
                                            [
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('contains'),
                                                factory.createIdentifier('searchText'),
                                              ),
                                              factory.createPropertyAssignment(
                                                factory.createIdentifier('mode'),
                                                factory.createStringLiteral('insensitive'),
                                              ),
                                            ],
                                            false,
                                          ),
                                        )],
                                        false,
                                      ),
                                    ],
                                    true,
                                  ),
                                )],
                                true,
                              ),
                              factory.createToken(ts.SyntaxKind.ColonToken),
                              factory.createIdentifier('undefined'),
                            ),
                          )],
                          ts.NodeFlags.Const | ts.NodeFlags.AwaitContext | ts.NodeFlags.ContextFlags | ts.NodeFlags.TypeExcludesFlags,
                        ),
                      ),
                      factory.createVariableStatement(
                        undefined,
                        factory.createVariableDeclarationList(
                          [factory.createVariableDeclaration(
                            factory.createObjectBindingPattern([
                              factory.createBindingElement(
                                undefined,
                                undefined,
                                factory.createIdentifier('edges'),
                                undefined,
                              ),
                              factory.createBindingElement(
                                undefined,
                                undefined,
                                factory.createIdentifier('pageInfo'),
                                undefined,
                              ),
                            ]),
                            undefined,
                            undefined,
                            factory.createAwaitExpression(factory.createCallExpression(
                              factory.createIdentifier('relayPageNation'),
                              undefined,
                              [factory.createObjectLiteralExpression(
                                [
                                  factory.createShorthandPropertyAssignment(
                                    factory.createIdentifier('prisma'),
                                    undefined,
                                  ),
                                  factory.createShorthandPropertyAssignment(
                                    factory.createIdentifier('args'),
                                    undefined,
                                  ),
                                  factory.createPropertyAssignment(
                                    factory.createIdentifier('type'),
                                    factory.createStringLiteral('artist'),
                                  ),
                                  factory.createShorthandPropertyAssignment(
                                    factory.createIdentifier('searches'),
                                    undefined,
                                  ),
                                ],
                                true,
                              )],
                            )),
                          )],
                          ts.NodeFlags.Const | ts.NodeFlags.AwaitContext | ts.NodeFlags.ContextFlags | ts.NodeFlags.TypeExcludesFlags,
                        ),
                      ),
                      factory.createReturnStatement(factory.createObjectLiteralExpression(
                        [
                          factory.createShorthandPropertyAssignment(
                            factory.createIdentifier('edges'),
                            undefined,
                          ),
                          factory.createShorthandPropertyAssignment(
                            factory.createIdentifier('pageInfo'),
                            undefined,
                          ),
                        ],
                        true,
                      )),
                    ],
                    true,
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('artist'),
                factory.createArrowFunction(
                  [factory.createModifier(ts.SyntaxKind.AsyncKeyword)],
                  undefined,
                  [
                    factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      undefined,
                      factory.createIdentifier('_'),
                      undefined,
                      undefined,
                      undefined,
                    ),
                    factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      undefined,
                      factory.createObjectBindingPattern([factory.createBindingElement(
                        undefined,
                        undefined,
                        factory.createIdentifier('id'),
                        undefined,
                      )]),
                      undefined,
                      undefined,
                      undefined,
                    ),
                    factory.createParameterDeclaration(
                      undefined,
                      undefined,
                      undefined,
                      factory.createObjectBindingPattern([
                        factory.createBindingElement(
                          undefined,
                          undefined,
                          factory.createIdentifier('prisma'),
                          undefined,
                        ),
                        factory.createBindingElement(
                          undefined,
                          undefined,
                          factory.createIdentifier('adminId'),
                          undefined,
                        ),
                      ]),
                      undefined,
                      undefined,
                      undefined,
                    ),
                  ],
                  undefined,
                  factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  factory.createBlock(
                    [
                      factory.createExpressionStatement(factory.createCallExpression(
                        factory.createIdentifier('assert'),
                        undefined,
                        [
                          factory.createIdentifier('adminId'),
                          factory.createStringLiteral('Not authorized'),
                        ],
                      )),
                      factory.createReturnStatement(factory.createCallExpression(
                        factory.createPropertyAccessExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('prisma'),
                            factory.createIdentifier('artist'),
                          ),
                          factory.createIdentifier('findUniqie'),
                        ),
                        undefined,
                        [factory.createObjectLiteralExpression(
                          [factory.createPropertyAssignment(
                            factory.createIdentifier('where'),
                            factory.createObjectLiteralExpression(
                              [factory.createShorthandPropertyAssignment(
                                factory.createIdentifier('id'),
                                undefined,
                              )],
                              false,
                            ),
                          )],
                          false,
                        )],
                      )),
                    ],
                    true,
                  ),
                ),
              ),
            ],
            true,
          ),
        )],
        true,
      ),
    )],
    ts.NodeFlags.Const,
  );

  return ret;
}

const resultFile = ts.createSourceFile('someFileName.ts', '', ts.ScriptTarget.Latest, /* setParentNodes */ false, ts.ScriptKind.TS);
const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });

const result = printer.printNode(ts.EmitHint.Unspecified, makeResolvers(), resultFile);

print('resolvers', result);
